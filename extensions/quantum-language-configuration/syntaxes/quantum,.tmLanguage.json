{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "Quantum",
    "fileTypes": [
        "qax",
        "qin"
    ],
    "scopeName": "source.quantum",
    "patterns": [
        { "include": "#sections" },
        { "include": "#comments" },
        { "include": "#variables" },
        { "include": "#axes" },
        { "include": "#arguments" },
        { "include": "#include-files" },
        { "include": "#definitions" },
        { "include": "#punctuation" }
    ],
    "repository": {
        "comments": {
            "patterns": [
                {
                    "comment": "line comments",
                    "name": "comment.line.quantum",
                    "match": "^(\\/\\*|[Cc]).*$",
                    "captures": { "1": { "name": "punctuation.definition.comment.quantum" } }
                }
            ]
        },
        "variables": {
            "patterns": [
                {
                    "comment": "&variables",
                    "name": "keyword.other.using.operator.variable.quantum",
                    "match": "&([[:alpha:]_]\\w*)",
                    "captures": { "1": { "name": "name.variable.quantum" } }
                }
            ]
        },
        "sections": {
            "patterns": [
                { "include": "#struct-a-section" },
                { "include": "#edit-section" },
                { "include": "#tab-section" }
            ]
        },
        "struct-a-section": {
            "patterns": [
                {
                    "comment": "struct, a section begin",
                    "name": "section.$1.quantum",
                    "match": "^(struct|a)",
                    "captures": { "1": { "name": "storage.type.$1.quantum" } }
                }
            ]
        },
        "edit-section": {
            "patterns": [
                {
                    "comment": "edit section",
                    "name": "section.edit.quantum",
                    "begin": "^(ed)",
                    "end": "^(end)",
                    "beginCaptures": { "1": { "name": "storage.type.$1.quantum" } },
                    "endCaptures": { "1": { "name": "storage.type.$1.quantum" } },
                    "patterns": [
                        { "include": "#edit-commands" },
                        { "include": "#flow-commands" },
                        { "include": "#include-files" },
                        { "include": "#definitions" },
                        { "include": "#variables" },
                        { "include": "#columns" },
                        { "include": "#comments" },
                        { "include": "#codes" },
                        { "include": "#operators" },
                        { "include": "#numbers" }
                    ]
                }
            ]
        },
        "tab-section": {
            "patterns": [
                {
                    "comment": "tabs",
                    "name": "section.$1.quantum",
                    "match": "^(tab) (.*) (.*)$",
                    "captures": {
                        "1": { "name": "storage.type.$1.quantum" },
                        "2": { "name": "variable.name.quantum" },
                        "3": {
                            "patterns": [
                                {
                                    "name": "support.function.option.quantum",
                                    "match": "r?grid"
                                },
                                {
                                    "name": "variable.name.quantum",
                                    "match": ".*"
                                }
                            ]
                        }
                    }
                }
            ]
        },
        "edit-commands": {
            "patterns": [
                {
                    "comment": "Comands for edit section",
                    "name": "keyword.edit-command.quantum",
                    "match": "(call|fetch|count|lista?|filedef|report)"
                }
            ]
        },
        "flow-commands": {
            "patterns": [
                {
                    "name": "keyword.control.flow.quantum",
                    "match": "\\b(if|else|return|goto|do|continue|stop|write|emit|delete|reject)\\b"
                }
            ]
        },
        "axes": {
            "patterns": [
                { "include": "#labels" },
                { "include": "#texts" },
                { "include": "#basic-statements" },
                { "include": "#numeric-statements" }
            ]
        },
        "labels": {
            "patterns": [
                {
                    "comment": "l statement",
                    "name": "label.statement.quantum",
                    "begin": "^(l)[[:blank:]](\\b([[:alpha:]_]\\w*)\\b)",
                    "end": "$",
                    "beginCaptures": {
                        "1": { "name": "storage.type.$1.quantum" },
                        "2": { "name": "variable.name.$1.quantum" }
                    },
                    "patterns": [
                        { "include": "#variables" },
                        { "include": "#arguments" }
                    ]
                }
            ]
        },
        "texts": {
            "patterns": [
                {
                    "name": "text.$1.quantum",
                    "begin": "^\\b(ttl|ttc|ttr|ttg|ttn|BOT)",
                    "end": "$",
                    "beginCaptures": { "1": { "name": "keyword.text.$1.quantum" } },
                    "patterns": [
                        { "include": "#text-values" },
                        { "include": "#arguments" }
                    ]
                }
            ]
        },
        "text-values": {
            "patterns": [
                {
                    "name": "text.value.quantum",
                    "begin": "(?<=^.{3})",
                    "end": "(?=(;|$))",
                    "while": "",
                    "patterns": [
                        { "include": "#variables" },
                        {
                            "name": "invalid.text-length.quantum",
                            "match": "(?<=^.{123})([^;\\n]*)"
                        }
                    ]
                }
            ]
        },
        "basic-statements": {
            "patterns": [
                {
                    "comment": "axes n statements",
                    "name": "axes.statement.$1.quantum",
                    "begin": "^\\b(n[0-9]{2}|m|side)([^;]*)",
                    "end": "$",
                    "captures": {
                        "1": { "name": "keyword.basic-statement.$1.quantum" },
                        "2": { "name": "source.groovy.embedded.basic-statement.quantum" }
                    },
                    "patterns": [
                        { "include": "#columns" },
                        { "include": "#variables" },
                        { "include": "#arguments" }
                    ]
                }
            ]
        },
        "numeric-statements": {
            "patterns": [
                {
                    "comment": "axes numeric statements",
                    "name": "axes.statement.numeric.quantum",
                    "begin": "^\\b(col|val|fld)",
                    "end": "$",
                    "beginCaptures": { "1": { "name": "keyword.numeric-statement.quantum" } },
                    "patterns": [
                        { "include": "#arguments" },
                        { "include": "#columns" }
                    ]
                }
            ]
        },
        "definitions": {
            "patterns": [
                {
                    "comment": "define variables",
                    "name": "define.quantum",
                    "begin": "^(\\*def)[[:blank:]]([[:alpha:]_]\\w*)",
                    "end": "$",
                    "captures": {
                        "1": { "name": "keyword.control.define.quantum" },
                        "2": { "name": "support.function.argument.quantum" }
                    },
                    "patterns": [
                        { "include": "#variables" },
                        { "include": "#values" }
                    ]
                }
            ]
        },
        "include-files": {
            "patterns": [
                {
                    "comment": "include files",
                    "name": "include.quantum",
                    "begin": "^(\\*include)[[:blank:]]+([^[[:blank:]];]+)",
                    "end": "$",
                    "beginCaptures": {
                        "1": { "name": "keyword.control.include.quantum" },
                        "2": { "name": "markup.underline.link.src.quantum" }
                    },
                    "patterns": [
                        { "include": "#columns" },
                        { "include": "#variables" },
                        { "include": "#arguments" }
                    ]
                }
            ]
        },
        "arguments": {
            "patterns": [
                {
                    "comment": "arguments",
                    "name": "argument.quantum",
                    "begin": "(;|\\+|(\\;%))",
                    "end": "(\\n)",
                    "beginCaptures": { "1": { "patterns": [ { "include": "#punctuation" } ] } },
                    "patterns": [
                        { "include": "#variables" },
                        { "include": "#options" },
                        { "include": "#values" }
                    ]
                }
            ]
        },
        "options": {
            "patterns": [
                {
                    "comment": "options ",
                    "name": "support.function.option.quantum",
                    "begin": "(?<=\\+|;)",
                    "end": "(?=[=;\\n])",
                    "patterns": [
                        {
                            "comment": "basic-options",
                            "name": "storage.type.option.basic.quantum",
                            "match": "(?<=\\W)(c|col\\([[:alpha:]]\\))(?=\\W)"
                        },
                        { "include": "#variables" }
                    ]
                }
            ]
        },
        "values": {
            "patterns": [
                {
                    "comment": "= value",
                    "name": "entity.name.label.value.quantum",
                    "begin": "(?==)",
                    "end": "(?=$|;)",
                    "patterns": [
                        { "include": "#variables" },
                        { "include": "#columns" },
                        { "include": "#codes" },
                        { "include": "#operators" },
                        { "include": "#numbers" }
                    ]
                }
            ]
        },
        "columns": {
            "patterns": [
                {
                    "comment": "columns with ()",
                    "name": "meta.definition.variable.name.column.quantum",
                    "begin": "c\\(",
                    "end": "\\)",
                    "patterns": [
                        {
                            "name": "keyword.operator.column.separator.quantum",
                            "match": "(,)"
                        }
                    ]
                },
                {
                    "comment": "columns without ()",
                    "name": "meta.definition.variable.name.column.quantum",
                    "match": "c[a-z]?[0-9]{3,4}"
                },
                {
                    "comment": "columns value",
                    "name": "meta.definition.variable.name.column.number.quantum",
                    "match": "[0-9]{3,4}"
                }
            ]
        },
        "codes": {
            "patterns": [
                {
                    "comment": "codes of column",
                    "name": "string.single.quote.quantum",
                    "match": "'[0-9\\/]*'"
                },
                {
                    "comment": "code strings of column",
                    "name": "string.dollor.quantum",
                    "match": "\\$.*\\$"
                }
            ]
        },
        "operators": {
            "patterns": [
                {
                    "comment": "logical .operator.",
                    "name": "entity.name.type.operator.logical.$1.quantum",
                    "match": "\\.(eq|gt|ge|lt|le|ne|in|and|or|xor|not)\\."
                },
                {
                    "comment": "logical operator ()",
                    "name": "entity.name.type.operator.logical.$1.quantum",
                    "match": "(and|or|xor|not)(?<=\\()"
                },
                {
                    "comment": "logical operator n u",
                    "name": "entity.name.type.operator.logical.unequal.quantum",
                    "match": "(?<=(\\w|\\)))[nu](?=('|\\$))"
                },
                {
                    "comment": "arithmetic operators",
                    "name": "entity.name.type.operator.arithmetic.quantum",
                    "match": "(\\+|-|\\*|/)"
                }
            ]
        },
        "numbers": {
            "patterns": [
                {
                    "comment": "any numbers",
                    "name": "meta.definition.variable.name.other.number.quantum",
                    "match": "(?<=[=(.,:])[0-9]+"
                }
            ]
        },
        "punctuation": {
            "patterns": [
                {
                    "comment": "parentheses, round brackets",
                    "name": "punctuation.brackets.round.quantum",
                    "match": "[()]"
                },
                {
                    "comment": "semicolon",
                    "name": "punctuation.semi.quantum",
                    "match": ";"
                },
                {
                    "comment": "equal",
                    "name": "punctuation.equal.quantum",
                    "match": "="
                },
                {
                    "comment": "single quote",
                    "name": "punctuation.single-quote.quantum",
                    "match": "'"
                },
                {
                    "comment": "dollor brackets",
                    "name": "string.dollar.quantum",
                    "match": "$"
                }
            ]
        }
    }
}
